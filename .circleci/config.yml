# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
      PATH: "~/cmake-3.6.2-Linux-x86_64/bin:~/.yarn/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

    steps:
      - checkout

      - run:
          name: Install clang-5.0
          command: |
            sudo apt-get update
            sudo apt-get install -y clang-4.0

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle.kts" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: bash gradlew dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle.kts" }}

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "jni/CMakeLists.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Download CMake
          command: |
            cd ~
            wget https://cmake.org/files/v3.6/cmake-3.6.2-Linux-x86_64.tar.gz
            tar -xvf cmake-3.6.2-Linux-x86_64.tar.gz
            cd ~/repo

      - save_cache:
          paths:
            - ~/cmake-3.6.2-Linux-x86_64
          key: v1-dependencies-{{ checksum "jni/CMakeLists.txt" }}

      - run:
          name: Generate native library headers
          command: bash gradlew javah

      - run:
          name: Build native library
          command: |
            mkdir -p res/native
            cd jni
            mkdir -p cmake-build-debug
            ls -l
            cat pre.sh | bash
            cd cmake-build-debug
            ~/cmake-3.6.2-Linux-x86_64/bin/cmake ..
            make
            cp *.so ../../res/native
            cd ../..

      - run: bash gradlew jar

      - store_artifacts:
          path: build/libs

      - run: bash gradlew test

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit
